#! /bin/bash -f
# To debug:#! /bin/bash -x
# Choose the FORTRAN to use.
# configure will use the FC environment variable for this.

export MQC_HOME="`pwd`"
mqc_tmpfile="${MQC_HOME}/.other_libs/build_fcns/tmp"
#
# Developers need to add to or modify the makefiles
# This needs to be done by developers only:
#
if [ ! -f Makefile.in ]; then
    autoreconf --install
elif [ ! -f src/Makefile.in ]; then
    autoreconf --install
elif [ ! -f examples/FCHK_Tests/Makefile.in ]; then
    autoreconf --install
elif [ ! -f configure ]; then
    autoreconf --install
elif [ ! -f install-sh ]; then
    autoreconf --install
elif [ ! -f test-driver ]; then
    autoreconf --install
elif [ ! -f missing ]; then
    autoreconf --install
elif [ ! -f depcomp ]; then
    autoreconf --install
elif [ configure.ac -nt configure ]; then
    autoreconf --install
elif [ Makefile.am -nt Makefile.in ]; then
    autoreconf --install
elif [ examples/FCHK_Tests/Makefile.am -nt examples/FCHK_Tests/Makefile.in ]; then
    autoreconf --install
elif [ src/Makefile.am -nt src/Makefile.in ]; then
    autoreconf --install
fi

if [ ! -f examples/MatFile_Tests/Makefile.in ]; then
    cd ${MQC_HOME}/examples/MatFile_Tests
    autoreconf --install
    cd ${MQC_HOME}
elif [ ! -f examples/MatFile_Tests/configure ]; then
    cd ${MQC_HOME}/examples/MatFile_Tests
    autoreconf --install
    cd ${MQC_HOME}
elif [ ! -f test-driver ]; then
    cd ${MQC_HOME}/examples/MatFile_Tests
    autoreconf --install
    cd ${MQC_HOME}
elif [ ! -f depcomp ]; then
    cd ${MQC_HOME}/examples/MatFile_Tests
    autoreconf --install
    cd ${MQC_HOME}
elif [ examples/MatFile_Tests/configure.ac -nt examples/MatFile_Tests/configure ]; then
    cd ${MQC_HOME}/examples/MatFile_Tests
    autoreconf --install
    cd ${MQC_HOME}
elif [ examples/MatFile_Tests/Makefile.am -nt examples/MatFile_Tests/Makefile.in ]; then
    cd ${MQC_HOME}/examples/MatFile_Tests
    autoreconf --install
    cd ${MQC_HOME}
fi
#
# Done with developers only section
#
export FC="g"
while [ "$FC" = "g" ]
do
    echo "Please select a compiler.  Available options are:"
    echo "    G - GNU compilers (gfortran/gcc) "
    echo "    P - PGI compilers (pgfortran/pgcc)"
    read -n 1 MQC_Compiler
    echo ""
    if [ "${MQC_Compiler}" = "G" ]; then
	path_to_executable="`command -v gcc`"
	if [ -x "${path_to_executable}" ] ; then
	    export CC="gcc"
	    path_to_executable="`command -v gfortran`"
	    if [ -x "${path_to_executable}" ] ; then
		export FC="gfortran"
		MQC_Compiler="GNU"
	    else
		echo "gfortran not found in path"
		echo "Cannot use GNU option.  gfortran not found in path"
	    fi
	else
	    echo "gcc not found in path"
	    echo "Cannot use GNU option.  gcc not found in path"
	fi
    elif [ "${MQC_Compiler}" = "P" ]; then
	export CC="g"
	path_to_executable="`command -v pgcc`"
	if [ -x "${path_to_executable}" ] ; then
	    export CC="pgcc"
	else
	    echo "pgcc not found in path"
	    path_to_executable="`command -v gcc`"
	    if [ -x "${path_to_executable}" ] ; then
		export CC="gcc"
		echo "gcc will be used"
	    else
		echo "gcc not found in path."
		echo "Not finding a C compiler in path."
		echo "Please fix path before you retry installing MQCPath"
		exit 1
	    fi
	fi
	if [ "$CC" != "g" ]; then
	    path_to_executable="`command -v pgfortran`"
	    if [ -x "${path_to_executable}" ] ; then
		export FC="pgfortran"
		MQC_Compiler="PGI"
	    else
		echo "Cannot use PGI option.  pgfortran not found in path"
	    fi
	fi
    elif [ "${FC}" = "g" ]; then
	echo ""
	echo "Please specify either GNU or PGI"
	echo ""
   fi
done
chmod 755 ${MQC_HOME}/.other_libs/build_fcns/chmod_all ${MQC_HOME}/.other_libs/build_fcns/cp_all ${MQC_HOME}/.other_libs/build_fcns/rm_all

if [ -f ${MQC_HOME}/.other_libs/build_fcns/default_COMPILER ]; then
    if [ "`cat ${MQC_HOME}/.other_libs/build_fcns/default_COMPILER`" != "${MQC_Compiler}" ]; then
	echo ""
	echo "The last build used a different compiler, so cleaning"
	echo "objects and module files."
	echo ""
	make clean > ${mqc_tmpfile} 2>&1
	cd src
	${MQC_HOME}/.other_libs/build_fcns/rm_all .mod > ${mqc_tmpfile} 2>&1
	cd $MQC_HOME/examples/MatFile_Tests > ${mqc_tmpfile} 2>&1
	make clean > ${mqc_tmpfile} 2>&1
	${MQC_HOME}/.other_libs/build_fcns/rm_all .mod > ${mqc_tmpfile} 2>&1
	cd ${MQC_HOME}
    fi
fi
echo "${MQC_Compiler}"  > ${MQC_HOME}/.other_libs/build_fcns/default_COMPILER

#
# configure always wants a directory where users can find software later.
# This just allows you to do this.
#
MQC_TEST="g"
export MQC_INSTALLATIONDIR="Not set"
while [ "$MQC_TEST" = "g" ]
do
    if [ -f ${MQC_HOME}/.other_libs/build_fcns/default ]; then
	echo "Please enter the desired Installation Directory"
	echo "[default: `cat ${MQC_HOME}/.other_libs/build_fcns/default`]?"
    else
	echo "Please enter the desired Installation Directory"
	echo "[default: /usr/local]?"
    fi
    read MQC_InstallationDir
    if [ "${MQC_InstallationDir}a" = "a" ]; then
	if [ -f ${MQC_HOME}/.other_libs/build_fcns/default ]; then
	    MQC_InstallationDir="`cat ${MQC_HOME}/.other_libs/build_fcns/default`"
	else 
	    MQC_InstallationDir="/usr/local"
	fi
    fi
    if [[ ${MQC_InstallationDir:0:1} == "~" ]]; then
	MQC_InstallationDir="`echo "${MQC_InstallationDir:1:${#MQC_InstallationDir}-1}"`"
	MQC_InstallationDir="${HOME}${MQC_InstallationDir}"
    fi
    [ ! -d ${MQC_InstallationDir} ] && mkdir ${MQC_InstallationDir} > ${mqc_tmpfile} 2>&1
    [ ! -d ${MQC_InstallationDir}/${MQC_Compiler} ] && mkdir ${MQC_InstallationDir}/${MQC_Compiler}  > ${mqc_tmpfile} 2>&1
    [ ! -d ${MQC_InstallationDir}/${MQC_Compiler}/lib ] && mkdir ${MQC_InstallationDir}/${MQC_Compiler}/lib  > ${mqc_tmpfile} 2>&1
    [ ! -d ${MQC_InstallationDir}/${MQC_Compiler}/mod ] && mkdir ${MQC_InstallationDir}/${MQC_Compiler}/mod  > ${mqc_tmpfile} 2>&1

    if [ ! -d ${MQC_InstallationDir} ]; then
	echo "Failed to create "${MQC_InstallationDir}
    elif [ ! -d ${MQC_InstallationDir}/${MQC_Compiler} ]; then
	echo "Failed to create "${MQC_InstallationDir}/${MQC_Compiler}
    elif [ ! -d ${MQC_InstallationDir}/${MQC_Compiler}/lib ]; then
	echo "Failed to create "${MQC_InstallationDir}/${MQC_Compiler}/lib
    elif [ ! -d ${MQC_InstallationDir}/${MQC_Compiler}/mod ]; then
	echo "Failed to create "${MQC_InstallationDir}/${MQC_Compiler}/mod
    else
	if [ ! -w ${MQC_InstallationDir} ]; then
	    echo "Cannot write to ${MQC_InstallationDir}"
	elif [ ! -r ${MQC_InstallationDir} ]; then
	    echo "Cannot read from ${MQC_InstallationDir}"
	elif [ ! -w ${MQC_InstallationDir}/${MQC_Compiler} ]; then
	    echo "Cannot write to ${MQC_InstallationDir}/${MQC_Compiler}"
	elif [ ! -r ${MQC_InstallationDir}/${MQC_Compiler} ]; then
	    echo "Cannot read from ${MQC_InstallationDir}/${MQC_Compiler}"
	elif [ ! -w ${MQC_InstallationDir}/${MQC_Compiler}/lib ]; then
	    echo "Cannot write to ${MQC_InstallationDir}/${MQC_Compiler}/lib"
	elif [ ! -r ${MQC_InstallationDir}/${MQC_Compiler}/lib ]; then
	    echo "Cannot read from ${MQC_InstallationDir}/${MQC_Compiler}/lib"
	elif [ ! -w ${MQC_InstallationDir}/${MQC_Compiler}/mod ]; then
	    echo "Cannot write to ${MQC_InstallationDir}/${MQC_Compiler}/mod"
	elif [ ! -r ${MQC_InstallationDir}/${MQC_Compiler}/mod ]; then
	    echo "Cannot read from ${MQC_InstallationDir}/${MQC_Compiler}/mod"
	else
	    MQC_TEST="y"
	    export MQC_INSTALLATIONDIR="${MQC_InstallationDir}/${MQC_Compiler}"
	fi
    fi
done
echo ${MQC_InstallationDir} > ${MQC_HOME}/.other_libs/build_fcns/default 2>&1
#
# Need to link with the BLAS library.  The following section of script 
# is where the installer to defines how to link the BLAS in for our tests.
# It also tests that the BLAS library has been correctly defined, so that 
# a typo here doesn't cause problems cause problems when we test MQCPack.
#
echo ""
echo "MQCPack requires the BLAS library."
echo ""

cd ${MQC_HOME}/.other_libs/BLAS
MQC_OLD_BLAS="g"
while [ "${MQC_OLD_BLAS}" = "g" ]
do
    if [ -f ${MQC_HOME}/.other_libs/BLAS/default ]; then
	echo "Please enter how you would link BLAS when building an"
	echo "executable [default: `cat ${MQC_HOME}/.other_libs/BLAS/default`]:"
    else
	echo "Please enter how you would link BLAS into an executable:"
    fi
    read MQC_BLAS
    if [ "${MQC_BLAS}a" = "a" ]; then
	if [ -f ${MQC_HOME}/.other_libs/BLAS/default ]; then
	    MQC_BLAS="`cat ${MQC_HOME}/.other_libs/BLAS/default`"
	else 
	    echo "There is no default choice"
	fi
    fi

    ${FC} test_blas_lib.f03 ${MQC_BLAS} > blas.err 2>&1

    if [ -f a.out ]; then
	MQC_OLD_BLAS="y"
	rm -f a.out
	echo "${MQC_BLAS}" > default 2>&1
    else
	echo "Warning: Problem when trying a test link with BLAS."
	echo "The Link line is:"
	echo ""
	echo "${FC} test_blas_lib.f03 ${MQC_BLAS}"
	echo ""
	echo "The error message is the next `wc -l < blas.err` lines"
	cat blas.err
	echo ""
	echo "Try entering the full path such as"
	echo "'/usr/lib/blas_LINUX.a'"
	echo "If you do not have BLAS, you can get it by "
	echo "downloading from this site:"
	echo "   http://www.netlib.org/blas/"
	echo "Then you will have to:"
	echo "     - make all"
	echo "When the build is finished, please enter the directory"
	echo "and hit return again"
    fi
done
cd ${MQC_HOME}
#
# Need to link with the LAPACK library.  The following section of script 
# is where the installer to defines how to link the LAPACK in for our tests.
# It also tests that the LAPACK library has been correctly defined, so that 
# a typo here doesn't cause problems cause problems when we test MQCPack.
#
echo ""
echo "MQCPack requires the LAPACK library."
echo ""

cd ${MQC_HOME}/.other_libs/LAPACK
MQC_OLD_LAPACK="g"
while [ "${MQC_OLD_LAPACK}" = "g" ]
do
    if [ -f default ]; then
	echo "Please enter how you would link LAPACK when building an"
	echo "executable [default: `cat ./default`]:"
    else
	echo "Please enter how you would link LAPACK when building an"
	echo "executable [default: `cat ../BLAS/default`]:"
    fi
    read MQC_LAPACK

    if [ "${MQC_LAPACK}a" = "a" ]; then
	if [ -f default ]; then
	    MQC_LAPACK="`cat default`"
	else 
	    MQC_LAPACK="`cat ../BLAS/default`"
	fi
    fi

    ${FC} test_lapack_lib.f03 ${MQC_LAPACK} ${MQC_BLAS} > lapack.err 2>&1

    if [ -f a.out ]; then
	MQC_OLD_LAPACK="y"
	rm -f a.out
	echo "${MQC_LAPACK}"  > default 2>&1
    else
	echo "Warning: Problem when trying a test link with LAPACK."
	echo "The Link line is:"
	echo ""
	echo "${FC} test_lapack_lib.f03 ${MQC_LAPACK} ${MQC_BLAS}"
	echo ""
	echo "The error message is the next `wc -l < lapack.err` lines"
	cat lapack.err
	echo ""
	echo "Try entering '-L{LAPACK Directory} -l{LAPACK Library}' such as"
	echo "'-L/usr/lib -llapack' or the full path such as"
	echo "'/usr/lib/liblapack.a'"
	echo "If you do not have LAPACK, you can get it by "
	echo "downloading from this site:"
	echo "   http://www.netlib.org/lapack/"
	echo "Then you will have to:"
	echo "     - Create make.inc (see make.inc.example)"
	echo "     - make"
	echo "When the build is finished, please enter the directory"
	echo "and hit return again"
    fi
done
cd ${MQC_HOME}
#
# Now build the FCHK functionality in the MQCPack library.
#
chmod 755 ./configure
./configure --prefix=${MQC_INSTALLATIONDIR}  --silent
# Remove the library.  So that is contains only what the build wants to add.
rm -f ${MQC_HOME}/src/libmqc.a
make  MQC_LAPACK=${MQC_LAPACK} MQC_BLAS=${MQC_BLAS}
echo "Congratulations! The FCHK functionality in libmqc is built!"

# These functions are required because BASH has a problem with '*'
${MQC_HOME}/.other_libs/build_fcns/chmod_all
#
# Now check the FCHK functionality in the MQCPack library.
#
echo "Now perform FCHK tests"
make check MQC_LAPACK=${MQC_LAPACK} MQC_BLAS=${MQC_BLAS}
#
# Done with the build and check of the FCHK functionality in the MQCPack library.
#
#
# Should we add MatrixFile ability to the MQCPack library?
#
echo "MatrixFile specific information"
echo ""
echo "The MACPack interface requires gauopen.  (If you don't have it"
echo "there are instructions on how to obtain it below.)"
echo ""
MQC_INTERFACE="g"
while [ "$MQC_INTERFACE" = "g" ]
do
    echo "Do you want to use and test the MatrixFile interface to MQCPack? [y or n]:"
    read -n 1 INTERFACE
    echo ""
    if [ "$INTERFACE" = "y" ]; then
	MQC_INTERFACE="y"
    elif [ "$INTERFACE" = "n" ]; then
	MQC_INTERFACE="n"
    fi
done

if [ "${MQC_INTERFACE}" = "y" ]; then
#
# We are going to add MatrixFile ability to the MQC library
#
# Build the 2 gauopen objects that MQC requires.  These objects
# will be added to the MQC library
#
    cd ${MQC_HOME}/.other_libs/gauopen
    MQC_INTERFACE="g"
# First find out where the gauopen sources reside
    while [ "$MQC_INTERFACE" = "g" ]
    do
	if [ -f default ]; then
	    echo "Enter the path to the gauopen directory"
	    echo "    [default: `cat default`]:"
	else
	    echo "Enter the path to the gauopen directory:"
	fi
	read MQC_GAUOPEN_DIR
	if [ "${MQC_GAUOPEN_DIR}a" = "a" ]; then
	    if [ -f default ]; then
		MQC_GAUOPEN_DIR="`cat default`"
	    fi
	fi
# Copy and use just 3 files to a local directory.  If all three files are not 
# in the directory, ask again.
	found="t"
	if [ -d ${MQC_GAUOPEN_DIR} ]; then
	    if [ -f ${MQC_GAUOPEN_DIR}/qc.make ]; then
		if [ -f qc.make  ]; then
		    diff ${MQC_GAUOPEN_DIR}/qc.make qc.make > gauopen.diff 2>&1
		    if [ -s gauopen.diff ]; then
			cp ${MQC_GAUOPEN_DIR}/qc.make .
# if the makefile is new, be sure to make both objects
			rm -f *.o
		    fi
		else
		    cp ${MQC_GAUOPEN_DIR}/qc.make .
		fi
	    else
		found="f"
	    fi
# Copy qcmatrixio.F in if the local copy is different from the source
	    if [ -f ${MQC_GAUOPEN_DIR}/qcmatrixio.F  ]; then
		if [ -f qcmatrixio.F ]; then
		    diff ${MQC_GAUOPEN_DIR}/qcmatrixio.F qcmatrixio.F  > gauopen.diff 2>&1
		    if [ -s gauopen.diff ]; then
			cp ${MQC_GAUOPEN_DIR}/qcmatrixio.F .
		    fi
		else
		    cp ${MQC_GAUOPEN_DIR}/qcmatrixio.F .
		fi
	    else
		found="f"
	    fi
# Copy qcmatrix.F in if the local copy is different from the source
	    if [ -f ${MQC_GAUOPEN_DIR}/qcmatrix.F ]; then
		if [ -f qcmatrix.F ]; then
		    diff ${MQC_GAUOPEN_DIR}/qcmatrix.F qcmatrix.F > gauopen.diff 2>&1
		    if [ -s gauopen.diff ]; then
			cp ${MQC_GAUOPEN_DIR}/qcmatrix.F .
		    fi
		else
		    cp ${MQC_GAUOPEN_DIR}/qcmatrix.F .
		fi
	    else
		found="f"
	    fi
	    if [ "${found}" = "t" ]; then
		make -f qc.make qcmatrixio.o qcmatrix.o > gauopen.err 2>&1
		if [ ! -f qcmatrixio.o ]; then
		    rm -f qcmatrix.o
		fi
		if [ -f qcmatrix.o ]; then
		    MQC_INTERFACE="y"
		    echo ${MQC_GAUOPEN_DIR}  > default 2>&1
		else
		    echo ""
		    echo "Failed to build the required gauopen routines."
		    echo "The next `wc -l gauopen.err` lines are the output of make:"
		    cat gauopen.err
		    echo ""
		    echo ""
		fi
	    else 
		echo ""
		echo "Did not find required gauopen sources." 
		echo "Please check that the directory that you supplied" 
		echo "is readable and contains:"
		echo "     qc.make "
		echo "     qcmatrixio.F "
		echo "     qcmatrix.F"
		echo "If you need to get gauopen:"
		echo "  - Go to http://gaussian.com/interfacing/"
		echo "  - Choose the Download tab"
		echo "  - Choose to Download"
		echo ""
	    fi
	else
	    echo ""
	    echo "You entered \'${MQC_GAUOPEN_DIR}\' which is not a directory"
	    echo "If you need to get gauopen:"
	    echo "  - Go to http://gaussian.com/interfacing/"
	    echo "  - Choose the Download tab"
	    echo "  - Choose to Download"
	    echo ""
	fi
    done
#
# Done building gauopen
#
    cd ${MQC_HOME}
# 
# Some of the tests run Gaussian.  Find out if the installer wants to run
# these tests.
#
    MQC_RUN_GAU="g"
    while [ "$MQC_RUN_GAU" = "g" ]
    do
	echo "Do you want to execute the tests that run Gaussian calculations? [y or n]:"
	read -n 1 INTERFACE
	echo ""
	if [ "$INTERFACE" = "y" ]; then
	    MQC_RUN_GAU="y"
	elif [ "$INTERFACE" = "n" ]; then
	    MQC_RUN_GAU="n"
	fi
    done

    if [ "${MQC_RUN_GAU}" = "y" ]; then
#
# Setup to run Gaussian.
#
	echo ""
	echo "Specify the Gaussian binary to use [default: g16]"
	read INTERFACE
	if [ "${INTERFACE}a" = "a" ]; then
	    export GAU_BINARY="g16"
	else
	    export GAU_BINARY="${INTERFACE}"
	fi
	MQC_tmpfile_tmp="/tmp/Invoke_$BASHPID"
	MQC_tmpfile="${MQC_HOME}/.other_libs/gaussian/default"

	path_to_executable="`command -v ${GAU_BINARY}`"
	while [ ! -x "${path_to_executable}" ]
	do
	    echo "Specify how to get the Gaussian environment from the BASH shell."
	    echo "You MUST enter many lines.  The final line MUST be blank."
	    if [ -f ${MQC_HOME}/.other_libs/gaussian/default ]; then
		echo "[enter a blank line to get default:"
		echo "`cat ${MQC_HOME}/.other_libs/gaussian/default`"
		echo ""
		echo "]:"
	    else
		echo "for example:"
		echo "export g16root=/opt"
		echo ". ${g16root}/g16/bsd/g16.profile"
		echo ""
	    fi

	    read INTERFACE
	    if [ "${INTERFACE}a" = "a" ]; then
		MQC_tmpfile="${MQC_HOME}/.other_libs/gaussian/default"
	    else
		MQC_tmpfile="${MQC_tmpfile_tmp}"
		echo "${INTERFACE}" > ${MQC_tmpfile}
		while [ "${INTERFACE}a" != "a" ]
		do
		    read INTERFACE
		    echo "${INTERFACE}" >> ${MQC_tmpfile}
		done
	    fi
	    . ${MQC_tmpfile}	
	    path_to_executable="`command -v ${GAU_BINARY}`"
	done
	if [ "${MQC_tmpfile}" != "${MQC_HOME}/.other_libs/gaussian/default" ]; then
	    mv ${MQC_tmpfile} ${MQC_HOME}/.other_libs/gaussian/default
	elif [ -f ${MQC_tmpfile_tmp} ] ; then
	    rm -f ${MQC_tmpfile_tmp}
	fi
#
# If the Gaussian scratch directory has not been specified, specify it now.
#
	if [ -v GAUSS_SCRDIR ]; then
	    if [ ! -d "${GAUSS_SCRDIR}" ]; then
		unset GAUSS_SCRDIR
	    elif [ ! -w "${GAUSS_SCRDIR}" ]; then
		unset GAUSS_SCRDIR
	    elif [ ! -r "${GAUSS_SCRDIR}" ]; then
		unset GAUSS_SCRDIR
	    fi
	fi
	while [ ! -v GAUSS_SCRDIR ]
	do 
	    echo "Please enter the scratch directory for Gaussian"
	    if [ -f ${MQC_HOME}/.other_libs/gaussian/default_scratch ]; then
		echo "[default:`cat ${MQC_HOME}/.other_libs/gaussian/default_scratch`]:"
	    fi
	    read INTERFACE
	    if [ ! -d "${INTERFACE}" ]; then
		echo "${INTERFACE} does not exist.  Please enter an existing directory."
	    elif [ ! -w "${INTERFACE}" ]; then
		echo "${INTERFACE} is not writable.  Please enter a writable directory."
	    elif [ ! -r "${INTERFACE}" ]; then
		echo "${INTERFACE} is not readable.  Please enter a readable directory."
	    else
		export GAUSS_SCRDIR="$INTERFACE"
	    fi
	done
# Save the working GAUSS_SCRDIR for use as default next time
	echo ${GAUSS_SCRDIR} > ${MQC_HOME}/.other_libs/gaussian/default_scratch 2>&1
# Use the script that will run Gaussian
	cp ${MQC_HOME}/examples/tools/testit_runGau.sh ${MQC_HOME}/examples/tools/testit.sh
    else
# Use the script that will not run Gaussian
	cp ${MQC_HOME}/examples/tools/testit_no_runGau.sh ${MQC_HOME}/examples/tools/testit.sh
    fi
# Make sure that we can execute the script to run or not run Gaussian
    chmod 755 ${MQC_HOME}/examples/tools/testit.sh

    cd ${MQC_HOME}/examples/MatFile_Tests
    chmod 755 configure
    ./configure --prefix=${MQC_INSTALLATIONDIR} --silent

# This is a check of the scripts.  Save a list of the objects in the MQC 
# library for comparison later
    ar t ${MQC_HOME}/src/libmqc.a > ${MQC_HOME}/.other_libs/gauopen/libmqc_pre_gauopen 2>&1
    cat ${MQC_HOME}/.other_libs/gauopen/libmqc_pre_gauopen | sort > ${MQC_HOME}/.other_libs/gauopen/libmqc_pre_gauopen_sorted
    rm -f ${MQC_HOME}/src/libmqc.a
# Build the MQC library with MatrixFile functionality
    make MQC_LAPACK=${MQC_LAPACK} MQC_BLAS=${MQC_BLAS} 
# Find the objects in the MQC library with MatrixFile functionality
    ar t ${MQC_HOME}/src/libmqc.a > ${MQC_HOME}/.other_libs/gauopen/libmqc_post_gauopen 2>&1
    cat ${MQC_HOME}/.other_libs/gauopen/libmqc_post_gauopen | sort > ${MQC_HOME}/.other_libs/gauopen/libmqc_post_gauopen_sorted

# Check that we are expanding the library.
# If this fails, first check examples/MatFile_Tests/Makefile.am
    diff ${MQC_HOME}/.other_libs/gauopen/libmqc_pre_gauopen_sorted ${MQC_HOME}/.other_libs/gauopen/libmqc_post_gauopen_sorted > ${MQC_HOME}/.other_libs/gauopen/libmqc_gauopen_diffs 2>&1
    if grep --quiet "<" ${MQC_HOME}/.other_libs/gauopen/libmqc_gauopen_diffs; then
	echo "New library missing some objects that were in the previous library."
	echo "Here is the difference in objects:"
	cat ${MQC_HOME}/.other_libs/gauopen/libmqc_gauopen_diffs 
	exit 1
    fi
    echo "Congratulations! The MQCPack library can now work with MatrixFiles!"
# Now check the MQCPack library with MatrixFile functionality
    make check MQC_LAPACK=${MQC_LAPACK} MQC_BLAS=${MQC_BLAS} 
fi
#
# Finally, install the library
#
cd ${MQC_HOME}
# /dev/null is not happy in this shell.  Use a file
make install MQC_LAPACK=${MQC_LAPACK} MQC_BLAS=${MQC_BLAS}

${MQC_HOME}/.other_libs/build_fcns/cp_all  src .mod ${MQC_INSTALLATIONDIR}/mod > ${mqc_tmpfile} 2>&1
rm ${mqc_tmpfile}

echo "Finished! with installation and testing"
exit


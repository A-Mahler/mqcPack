#! /bin/bash -f
# To debug:#! /bin/bash -x
# Choose the FORTRAN to use.
# configure will use the FC environment variable for this.
export FC="g"

export MQC_HOME="`pwd`"
while [ "$FC" = "g" ]
do
    echo "Do you wish to use gfortran or pgfortran to compile FORTRAN[default: gfortran]?"
    read MQC_FORTRAN
    if [ "${MQC_FORTRAN}" = "gfortran" ]; then
	path_to_executable="`command -v gfortran`"
	if [ -x "${path_to_executable}" ] ; then
	    export FC="gfortran"
	else
	    echo "gfortran not found"
	fi
    elif [ "${MQC_FORTRAN}" = "pgfortran" ]; then
	path_to_executable="`command -v pgfortran`"
	if [ -x "${path_to_executable}" ] ; then
	    export FC="pgfortran"
	else
	    echo "pgfortran not found"
	fi
    elif [ "${MQC_FORTRAN}a" = "a" ]; then
	path_to_executable="`command -v gfortran`"
	if [ -x "${path_to_executable}" ] ; then
	    export FC="gfortran"
	else
	    echo "gfortran not found"
	fi
   fi
done

# Choose the C compiler to use.
# configure will use the CC environment variable for this.
export CC="g"

while [ "$CC" = "g" ]
do
    echo "Do you wish to use gcc or pgcc to compile C [default: gcc]?"
    read MQC_CC
    if [ "${MQC_CC}" = "gcc" ]; then
	path_to_executable="`command -v gcc`"
	if [ -x "${path_to_executable}" ] ; then
	    export CC="gcc"
	else
	    echo "gcc not found"
	fi
    elif [ "${MQC_CC}" = "pgcc" ]; then
	path_to_executable="`command -v pgcc`"
	if [ -x "${path_to_executable}" ] ; then
	    export CC="pgcc"
	else
	    echo "pgcc not found"
	fi
    elif [ "${MQC_CC}a" = "a" ]; then
	path_to_executable="`command -v gcc`"
	if [ -x "${path_to_executable}" ] ; then
	    export CC="gcc"
	else
	    echo "gcc not found"
	fi
    fi
done

MQC_TEST="g"
export MQC_INSTALLATIONDIR="Not set"
while [ "$MQC_TEST" = "g" ]
do
    if [ -f ${MQC_HOME}/.other_libs/build_fcns/default ]; then
	echo "Please enter the desired Installation Directory"
	echo "[default: `cat ${MQC_HOME}/.other_libs/build_fcns/default`]?"
    else
	echo "Please enter the desired Installation Directory"
	echo "[default: /usr/local]?"
    fi
    read MQC_InstallationDir
    if [ "${MQC_InstallationDir}a" = "a" ]; then
	if [ -f ${MQC_HOME}/.other_libs/BLAS/default ]; then
	    MQC_InstallationDir="`cat ${MQC_HOME}/.other_libs/build_fcns/default`"
	else 
	    MQC_InstallationDir="/usr/local"
	fi
    fi
    if [[ ${MQC_InstallationDir:0:1} == "~" ]]; then
	echo "This tool does not understand ~.  Please enter the directory without using ~"
    else
	[ ! -d ${MQC_InstallationDir} ] && mkdir ${MQC_InstallationDir}

	if [ ! -d ${MQC_InstallationDir} ]; then
	    echo "Failed to create "${MQC_InstallationDir}
	else
	    touch ${MQC_InstallationDir}/MQC_TEST
	    if [ -f ${MQC_InstallationDir}/MQC_TEST ]; then
		MQC_TEST="y"
		export MQC_INSTALLATIONDIR="${MQC_InstallationDir}"
	    else
		rm -f ${MQC_InstallationDir}/MQC_TEST
		echo "Cannot write to ${MQC_InstallationDir}"
	    fi
	fi
    fi
done
echo ${MQC_INSTALLATIONDIR} > ${MQC_HOME}/.other_libs/build_fcns/default 2>&1

echo ""
echo "MQC requires the BLAS library."
echo ""

cd ${MQC_HOME}/.other_libs/BLAS
MQC_OLD_BLAS="g"
while [ "${MQC_OLD_BLAS}" = "g" ]
do
    if [ -f ${MQC_HOME}/.other_libs/BLAS/default ]; then
	echo "Please enter how you would link BLAS when building an"
	echo "executable [default: `cat ${MQC_HOME}/.other_libs/BLAS/default`]:"
    else
	echo "Please enter how you would link BLAS into an executable:"
    fi
    read MQC_BLAS
    if [ "${MQC_BLAS}a" = "a" ]; then
	if [ -f ${MQC_HOME}/.other_libs/BLAS/default ]; then
	    MQC_BLAS="`cat ${MQC_HOME}/.other_libs/BLAS/default`"
	else 
	    echo "There is no default choice"
	fi
    fi

    $FC test_blas_lib.f03 ${MQC_BLAS} > blas.err 2>&1
    rm -f a.out

    if [ "`wc blas.err`" = "0 0 0 blas.err" ]; then
	MQC_OLD_BLAS="y"
	echo "${MQC_BLAS}" > default 2>&1
    else
	echo "Warning: Problem when trying a test link with BLAS."
	echo "         Error Message is:"
	cat blas.err
	echo ""
	echo ""
	echo ""
	echo "Try entering the full path such as"
	echo "\'/usr/lib/blas_LINUX.a\'"
	echo "If you do not have BLAS, you can get it by "
	echo "downloading from this site:"
	echo "   http://www.netlib.org/blas/"
	echo "Then you will have to:"
	echo "     - make all"
	echo "When the build is finished, please enter the directory"
	echo "and hit return again"
    fi
done
cd ${MQC_HOME}

echo ""
echo "MQC requires the LAPACK library."
echo ""

cd ${MQC_HOME}/.other_libs/LAPACK
MQC_OLD_LAPACK="g"
while [ "${MQC_OLD_LAPACK}" = "g" ]
do
    if [ -f default ]; then
	echo "Please enter how you would link LAPACK when building an"
	echo "executable [default: `cat ./default`]:"
    else
	echo "Please enter how you would link LAPACK when building an"
	echo "executable [default: `cat ../BLAS/default`]:"
    fi
    read MQC_LAPACK

    if [ "${MQC_LAPACK}a" = "a" ]; then
	if [ -f default ]; then
	    MQC_LAPACK="`cat default`"
	else 
	    MQC_LAPACK="`cat ../BLAS/default`"
	fi
    fi

    $FC test_lapack_lib.f03 ${MQC_LAPACK} ${MQC_BLAS} > lapack.err 2>&1
    rm -f a.out

    if [ "`wc lapack.err`" = "0 0 0 lapack.err" ]; then
	MQC_OLD_LAPACK="y"
	echo "${MQC_LAPACK}"  > default 2>&1
    else
	echo "Warning: Problem when trying a test link with LAPACK."
	echo "         Error Message is:"
	cat lapack.err
	echo ""
	echo ""
	echo ""
	echo "Try entering \'-L{LAPACK Directory} -l{LAPACK Library}\' such as"
	echo "\'-L/usr/lib -llapack\' or the full path such as"
	echo "\'/usr/lib/liblapack.a\'"
	echo "If you do not have LAPACK, you can get it by "
	echo "downloading from this site:"
	echo "   http://www.netlib.org/lapack/"
	echo "Then you will have to:"
	echo "     - Create make.inc (see make.inc.example)"
	echo "     - make"
	echo "When the build is finished, please enter the directory"
	echo "and hit return again"
    fi
done
cd ${MQC_HOME}

chmod 755 ./configure
./configure --prefix=${MQC_INSTALLATIONDIR}
# Remove the library.  So that is contains only what the build wants to add.
rm -f ${MQC_HOME}/src/libmqc.a
make  MQC_LAPACK=${MQC_LAPACK} MQC_BLAS=${MQC_BLAS}
echo "Congratulations! The RWF functionality in libmqc is built!"
make install MQC_LAPACK=${MQC_LAPACK} MQC_BLAS=${MQC_BLAS}

# These functions are required because BASH has a problem with '*'
chmod 755 ${MQC_HOME}/.other_libs/build_fcns/chmod_all ${MQC_HOME}/.other_libs/build_fcns/cp_all
${MQC_HOME}/.other_libs/build_fcns/cp_all  src .mod ${MQC_INSTALLATIONDIR}/lib 
${MQC_HOME}/.other_libs/build_fcns/chmod_all

echo "Now perform RWF tests"
make check MQC_LAPACK=${MQC_LAPACK} MQC_BLAS=${MQC_BLAS}

echo "Gaussian specific information"
MQC_INTERFACE="g"
while [ "$MQC_INTERFACE" = "g" ]
do
    echo "Do you want to use and test the Gaussian specific interface in MQC? [y or n]:"
    read -n 1 INTERFACE
    echo ""
    if [ "$INTERFACE" = "y" ]; then
	MQC_INTERFACE="y"
    elif [ "$INTERFACE" = "n" ]; then
	MQC_INTERFACE="n"
	echo "Finished! with installation and testing"
	exit
    fi
done

if [ "${MQC_INTERFACE}" = "y" ]; then
    cd ${MQC_HOME}/.other_libs/gauopen
    MQC_INTERFACE="g"
    while [ "$MQC_INTERFACE" = "g" ]
    do
	if [ -f default ]; then
	    echo "Enter the path to the gauopen directory"
	    echo "    [default: `cat default`]:"
	else
	    echo "Enter the path to the gauopen directory:"
	fi
	read MQC_GAUOPEN_DIR
	if [ "${MQC_GAUOPEN_DIR}a" = "a" ]; then
	    if [ -f default ]; then
		MQC_GAUOPEN_DIR="`cat default`"
	    fi
	fi
# We need to copy and use just 3 files.  If all three files are not 
# in the directory, ask again.
	found="t"
	if [ -d ${MQC_GAUOPEN_DIR} ]; then
	    if [ -f ${MQC_GAUOPEN_DIR}/qc.make ]; then
		if [ -f qc.make  ]; then
		    diff ${MQC_GAUOPEN_DIR}/qc.make qc.make > gauopen.diff 2>&1
		    if [ "`wc gauopen.diff`" != "0 0 0 gauopen.diff" ]; then
			cp ${MQC_GAUOPEN_DIR}/qc.make .
# if the makefile is new, be sure to make both objects
			rm -f *.o
		    fi
		else
		    cp ${MQC_GAUOPEN_DIR}/qc.make .
		fi
	    else
		found="f"
	    fi
	    if [ -f ${MQC_GAUOPEN_DIR}/qcmatrixio.F  ]; then
		if [ -f qcmatrixio.F ]; then
		    diff ${MQC_GAUOPEN_DIR}/qcmatrixio.F qcmatrixio.F  > gauopen.diff 2>&1
		    if [ "`wc gauopen.diff`" != "0 0 0 gauopen.diff" ]; then
			cp ${MQC_GAUOPEN_DIR}/qcmatrixio.F .
		    fi
		else
		    cp ${MQC_GAUOPEN_DIR}/qcmatrixio.F .
		fi
	    else
		found="f"
	    fi
	    if [ -f ${MQC_GAUOPEN_DIR}/qcmatrix.F ]; then
		if [ -f qcmatrix.F  ]; then
		    diff ${MQC_GAUOPEN_DIR}/qcmatrix.F qcmatrix.F > gauopen.diff 2>&1
		    if [ "`wc gauopen.diff`" != "0 0 0 gauopen.diff" ]; then
			cp ${MQC_GAUOPEN_DIR}/qcmatrix.F .
		    fi
		else
		    cp ${MQC_GAUOPEN_DIR}/qcmatrix.F .
		fi
	    else
		found="f"
	    fi
	    if [ "${found}" = "t" ]; then
		make -f qc.make qcmatrixio.o qcmatrix.o > gauopen.err 2>&1
		if [ ! -f qcmatrixio.o ]; then
		    rm -f qcmatrix.o
		fi
		if [ -f qcmatrix.o ]; then
		    MQC_INTERFACE="y"
		    echo ${MQC_GAUOPEN_DIR}  > default 2>&1
		else
		    echo "Failed to build the required gauopen routines."
		    echo "Here is the output of make:"
		    cat gauopen.err
		fi
	    else 
		echo "Did not find required gauopen sources." 
		echo "Please check that the directory that you supplied" 
		echo "is readable and contains:"
		echo "     qc.make "
		echo "     qcmatrixio.F "
		echo "     qcmatrix.F"
		echo "If you need to get gauopen:"
		echo "  - Go to http://gaussian.com/interfacing/"
		echo "  - Choose the Download tab"
		echo "  - Choose to Download"
	    fi
	else
	    echo "You entered \'${MQC_GAUOPEN_DIR}\' which is not a directory"
	    echo "If you need to get gauopen:"
	    echo "  - Go to http://gaussian.com/interfacing/"
	    echo "  - Choose the Download tab"
	    echo "  - Choose to Download"
	fi
    done

    cd ${MQC_HOME}

    echo "The tests run Gaussian calculations."
    echo "Specify the Gaussian binary to use [default: g16]"
    read INTERFACE
    if [ "${INTERFACE}a" = "a" ]; then
	export GAU_BINARY="g16"
    else
	export GAU_BINARY="${INTERFACE}"
    fi

    MQC_tmpfile_tmp="/tmp/Invoke_$BASHPID"
    MQC_tmpfile="${MQC_HOME}/.other_libs/gaussian/default"

    path_to_executable="`command -v ${GAU_BINARY}`"
    while [ ! -x "${path_to_executable}" ]
    do
	if [ -f ${MQC_HOME}/.other_libs/gaussian/default ]; then
	    echo "Specify how to get the Gaussian environment from the BASH shell."
	    echo "You can enter many lines.  The last line should be blank."
	    echo "[default:"
	    echo "`cat ${MQC_HOME}/.other_libs/gaussian/default`"
	    echo "]:"
	else
	    echo "Specify how to get the Gaussian environment from the BASH shell"
	    echo "You can enter many lines.  The last line should be blank."
	    echo "for example:"
	    echo "export g16root=/opt"
	    echo ". ${g16root}/g16/bsd/g16.profile"
	    echo ""
	fi

	read INTERFACE
	if [ "${INTERFACE}a" = "a" ]; then
	    MQC_tmpfile="${MQC_HOME}/.other_libs/gaussian/default"
	else
	    MQC_tmpfile="${MQC_tmpfile_tmp}"
	    echo "${INTERFACE}" > ${MQC_tmpfile}
	    while [ "${INTERFACE}a" != "a" ]
	    do
		read INTERFACE
		echo "${INTERFACE}" >> ${MQC_tmpfile}
	    done
	fi
	. ${MQC_tmpfile}	
	path_to_executable="`command -v ${GAU_BINARY}`"
    done

    if [ "${MQC_tmpfile}" != "${MQC_HOME}/.other_libs/gaussian/default" ]; then
	mv ${MQC_tmpfile} ${MQC_HOME}/.other_libs/gaussian/default
    elif [ -f ${MQC_tmpfile_tmp} ] ; then
	rm -f ${MQC_tmpfile_tmp}
    fi

    if [ -z "${GAUSS_SCRDIR}" ]; then
	export GAUSS_SCRDIR=""
    else
	touch ${GAUSS_SCRDIR}/MQC_TEST
    fi
    first="0"
    while [ ! -f ${GAUSS_SCRDIR}/MQC_TEST ]
    do 
	if [ "${first}" = "0" ]; then
	    if [ -f ${MQC_HOME}/.other_libs/gaussian/default_scratch ]; then
		echo "Please enter the scratch directory for Gaussian"
		echo "[default:`cat ${MQC_HOME}/.other_libs/gaussian/default_scratch`]:"
	    else
		echo "Please enter the scratch directory for Gaussian"
	    fi
	fi
	read INTERFACE
	export GAUSS_SCRDIR="$INTERFACE"
	touch ${GAUSS_SCRDIR}/MQC_TEST
	if [ ! -f "${GAUSS_SCRDIR}/MQC_TEST" ]; then
	    if [ ! -d "${GAUSS_SCRDIR}" ]; then
		echo "${GAUSS_SCRDIR} does not exist.  Please enter an existing directory."
	    else
		echo "Cannot write to ${GAUSS_SCRDIR}.  Please a directory with write permission."
	    fi
	fi
    done
    rm ${GAUSS_SCRDIR}/MQC_TEST
    echo ${GAUSS_SCRDIR} > ${MQC_HOME}/.other_libs/gaussian/default_scratch 2>&1

    cd ${MQC_HOME}/examples/MatFile_Test
    chmod 755 configure
    ./configure --prefix=${MQC_INSTALLATIONDIR}

    ar t ${MQC_HOME}/src/libmqc.a > ${MQC_HOME}/.other_libs/gauopen/libmqc_pre_gauopen 2>&1
    rm -f ${MQC_HOME}/src/libmqc.a
    make MQC_LAPACK=${MQC_LAPACK} MQC_BLAS=${MQC_BLAS} 
    ar t ${MQC_HOME}/src/libmqc.a > ${MQC_HOME}/.other_libs/gauopen/libmqc_post_gauopen 2>&1
# Check that we are expanding the library.
# If this fails, first check examples/MatFile_Test/Makefile.am
    diff ${MQC_HOME}/.other_libs/gauopen/libmqc_pre_gauopen ${MQC_HOME}/.other_libs/gauopen/libmqc_post_gauopen > ${MQC_HOME}/.other_libs/gauopen/libmqc_gauopen_diffs 2>&1
    if grep --quiet "<" ${MQC_HOME}/.other_libs/gauopen/libmqc_gauopen_diffs; then
	echo "New library missing some objects that were in the previous library."
	echo "Here is the difference in objects:"
	cat ${MQC_HOME}/.other_libs/gauopen/libmqc_gauopen_diffs 
	exit 1
    fi
    echo "Congratulations! The MQC library can now work with MatrixFiles!"
    make install MQC_LAPACK=${MQC_LAPACK} MQC_BLAS=${MQC_BLAS} 
    ${MQC_HOME}/.other_libs/build_fcns/cp_all ../../src .mod ${MQC_INSTALLATIONDIR}/lib 

    make check MQC_LAPACK=${MQC_LAPACK} MQC_BLAS=${MQC_BLAS} 
    cd ${MQC_HOME}
fi

echo "Finished! with installation and testing"
exit

